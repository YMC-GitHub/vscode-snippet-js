{
  "comment_line": {
    "prefix": "comment_line",
    "body": [
      "// commment_here .."
    ],
    "description": "单行注释"
  },
  "comment_multi_line": {
    "prefix": "comment_multi_line",
    "body": [
      "/*",
      " commment_here ..",
      " commment_here ..",
      "*/"
    ],
    "description": "多行注释"
  },
  "comment_multi_line_02": {
    "prefix": "comment_multi_line_02",
    "body": [
      "/*",
      "* commment_here ..",
      "* commment_here ..",
      "*/"
    ],
    "description": "多行注释"
  },
  "var_define": {
    "prefix": "var_define",
    "body": [
      "var var_name"
    ],
    "description": "变量定义"
  },
  "var_define_02": {
    "prefix": "var_define_02",
    "body": [
      "var var_name=value"
    ],
    "description": "变量定义"
  },
  "var_define_multi": {
    "prefix": "var_define_multi",
    "body": [
      "var var_name1,var_name2"
    ],
    "description": "变量定义"
  },
  "var_define_multi_02": {
    "prefix": "var_define_multi_02",
    "body": [
      "var var_name1=value1,var_name2=value2"
    ],
    "description": "变量定义"
  },
  "var_read": {
    "prefix": "var_read",
    "body": [
      "var_name"
    ],
    "description": "变量读取"
  },
  "var_delete": {
    "prefix": "var_delete",
    "body": [
      "var_name=undefined"
    ],
    "description": "变量删除"
  }
  ,
  "var_delete_02": {
    "prefix": "var_delete_02",
    "body": [
      "delete obj.key_name"
    ],
    "description": "变量删除:对象属性删除"
  },
  "function_define": {
    "prefix": "function_define",
    "body": [
      "function fun_name(arg1,arg2...){",
      "    action1;",
      "    action2;",
      "    return value;",
      "}"
    ],
    "description": "函数定义："
  },
  "math_add": {
    "prefix": "math_add",
    "body": [
      "a + b"
    ],
    "description": "算数运算：加法 a + b"
  },
  "math_sub": {
    "prefix": "math_sub",
    "body": [
      "a - b"
    ],
    "description": "算数运算：减法 a - b"
  },
  "math_multi": {
    "prefix": "math_multi",
    "body": [
      "a \\* b"
    ],
    "description": "算数运算：乘法 a * b"
  },
  "math_devide": {
    "prefix": "math_devide",
    "body": [
      "a / b"
    ],
    "description": "算数运算：除法 a / b"
  },
  "math_mod": {
    "prefix": "math_mod",
    "body": [
      "a % b"
    ],
    "description": "算数运算：取余 a % b"
  },
  "math_euqal": {
    "prefix": "math_euqal",
    "body": [
      "(a == b)"
    ],
    "description": "算数运算：相等 (a == b)"
  },
  "math_not_euqal": {
    "prefix": "math_not_euqal",
    "body": [
      "(a != b)"
    ],
    "description": "算数运算：不等 (a != b)"
  },
  "logic_not": {
    "prefix": "logic_not",
    "body": [
      "!a"
    ],
    "description": "逻辑运算：非 !a"
  },
  "logic_or": {
    "prefix": "logic_or",
    "body": [
      "a || b"
    ],
    "description": "逻辑运算：或 a || b"
  },
  "logic_and": {
    "prefix": "logic_and",
    "body": [
      "a && b"
    ],
    "description": "逻辑运算：与 a && b"
  },
  "if_multiline": {
    "prefix": "if_multiline",
    "body": [
      "if condition",
      "{",
      "    command1",
      "    command2",
      "}"
    ],
    "description": "条件语句：if 多行写法"
  },
  "if_oneline": {
    "prefix": "if_oneline",
    "body": [
      "if condition command1"
    ],
    "description": "条件语句：if 一行写法"
  },
  "if_oneline_02": {
    "prefix": "if_oneline_02",
    "body": [
      "(condition)?command1:command2"
    ],
    "description": "条件语句：if 一行写法"
  },
  "switch_multiline": {
    "prefix": "switch_multiline",
    "body": [
      "switch(n)",
      "{",
      "  case 1:",
      "   command1",
      "  break;",
      "  case 2:",
      "   command2",
      "  break;",
      "  default:",
      "   command_default",
      "}"
    ],
    "description": "分支语句：switch 多行写法"
  },
  "for_multiline": {
    "prefix": "for_multiline",
    "body": [
      "for condition",
      "{",
      "    command1",
      "    command2",
      "}"
    ],
    "description": "循环语句：for 多行写法"
  },
  "for_oneline": {
    "prefix": "for_oneline",
    "body": [
      "for condition { command1}"
    ],
    "description": "循环语句：for 一行写法"
  },
  "for_in_multiline": {
    "prefix": "for_in_multiline",
    "body": [
      "for (item in list) ",
      "{",
      "    command1",
      "    command2",
      "}"
    ],
    "description": "循环语句：for in 多行写法"
  },
  "while_multiline": {
    "prefix": "while_multiline",
    "body": [
      "while condition",
      "{",
      "    command1",
      "    command2",
      "}"
    ],
    "description": "循环语句：while 多行写法"
  },
  "do_while_multiline": {
    "prefix": "do_while_multiline",
    "body": [
      "do",
      "{",
      "    command1",
      "    command2",
      "}",
      "while condition;"
    ],
    "description": "循环语句：do while 多行写法"
  },
  "mod_require": {
    "prefix": "mod_require",
    "body": [
      "require('${1:package}')"
    ],
    "description": "模块导入"
  },
  "mod_require_to_var": {
    "prefix": "mod_require_to_var",
    "body": "var ${1:packageName} = require('${1:package}');$0",
    "description": "模块导入"
  },
  "mod_require_to_let": {
    "prefix": "mod_require_to_let",
    "body": "let ${1:packageName} = require('${1:package}');$0",
    "description": "模块导入"
  },
  "mod_require_to_const": {
    "prefix": "mod_require_to_const",
    "body": "const ${1:packageName} = require('${1:package}');$0",
    "description": "模块导入"
  },
  "mod_export": {
    "prefix": "mod_export",
    "body": "module.exports = {\n\t$0\n};\n",
    "description": "模块导出"
  },
  "mod_import_from": {
    "prefix": "mod_import_from",
    "body": "import ${2:moduleName} from '${1:module}';$0",
    "description": "模块导入 import fs from 'fs'"
  },
  "mod_import_no_name": {
    "prefix": "mod_import_no_name",
    "body": "import '${1:module}';$0",
    "description": "模块导入 import 'xx'"
  },
  "mod_import_from_destructing": {
    "prefix": "mod_import_from_destructing",
    "body": "import { $2 } from '${1:module}';$0",
    "description": "模块导入 import {x1,x2} from 'fs'"
  },  
  "mod_import_from_all": {
    "prefix": "mod_import_from_all",
    "body": "import * as ${2:alias} from '${1:module}';$0",
    "description": "模块导入 import * as fs from 'fs'"
  },  
  "mod_import_as": {
    "prefix": "mod_import_as",
    "body": "import { ${2:originalName} as ${3:alias} } from '${1:module}';$0",
    "description": "模块导入 import {x as x2}  from 'fs'"
  },
  "mod_export_var": {
    "prefix": "mod_export_var",
    "body": "export const ${1:exportVariable} = ${2:localVariable};\n",
    "description": "模块导出 export const var_name = var_value ;"
  },
  "mod_export_fun": {
    "prefix": "mod_export_fun",
    "body": "export const ${1:functionName} = (${2:params}) => {\n\t$0\n};\n",
    "description": "模块导出 export const fun_name = ()=>{};"
  },
  "mod_export_fun_default": {
    "prefix": "mod_export_fun_default",
    "body": "export default function ${1:${TM_FILENAME_BASE}}(${2:params}) {\n\t$0\n};\n",
    "description": "模块导出 export default function fun_name (){}"
  },
  "mod_export_class": {
    "prefix": "mod_export_class",
    "body": "export default class ${1:className} {\n\t$0\n};\n",
    "description": "模块导出 export default class class_name {};"
  },
  "mod_export_class_extend": {
    "prefix": "mod_export_class_extend",
    "body": "export default class ${1:className} extends ${2:baseclassName} {\n\t$0\n};\n",
    "description": "模块导出 export default class class_name extends class_name2 {}"
  }
}
